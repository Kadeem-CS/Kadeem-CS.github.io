<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chessboard with Legal Moves</title>
  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone@7.10.3/babel.min.js" crossorigin></script>
</head>
<body>
  <div id="root"></div>

  <script type="text/babel" data-presets="react,stage-3">
    const initialGameState = [
      ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
      ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
      ['', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', ''],
      ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
      ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
    ];

    const pieceImages = {
      'r': 'https://upload.wikimedia.org/wikipedia/commons/f/ff/Chess_rdt45.svg',
      'n': 'https://upload.wikimedia.org/wikipedia/commons/e/ef/Chess_ndt45.svg',
      'b': 'https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg',
      'q': 'https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg',
      'k': 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Chess_kdt45.svg',
      'p': 'https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg',
      'R': 'https://upload.wikimedia.org/wikipedia/commons/7/72/Chess_rlt45.svg',
      'N': 'https://upload.wikimedia.org/wikipedia/commons/7/70/Chess_nlt45.svg',
      'B': 'https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg',
      'Q': 'https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg',
      'K': 'https://upload.wikimedia.org/wikipedia/commons/4/42/Chess_klt45.svg',
      'P': 'https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg'
    };

    // Check if a move is valid based on chess rules
    function isValidMove(piece, fromRow, fromCol, toRow, toCol, game) {
      const destinationPiece = game[toRow][toCol];
      const isWhite = piece === piece.toUpperCase();
      const isEnemy = isWhite ? destinationPiece === destinationPiece.toLowerCase() : destinationPiece === destinationPiece.toUpperCase();
      const deltaX = toCol - fromCol;
      const deltaY = toRow - fromRow;

      switch (piece.toLowerCase()) {
        case 'p': // Pawn
          if (isWhite) {
            if (deltaY === -1 && deltaX === 0 && !destinationPiece) return true; // Move forward
            if (deltaY === -1 && Math.abs(deltaX) === 1 && isEnemy) return true; // Capture diagonally
            if (fromRow === 6 && deltaY === -2 && deltaX === 0 && !game[toRow][toCol] && !game[toRow + 1][toCol]) return true; // Move two squares from start
          } else {
            if (deltaY === 1 && deltaX === 0 && !destinationPiece) return true; // Move forward
            if (deltaY === 1 && Math.abs(deltaX) === 1 && isEnemy) return true; // Capture diagonally
            if (fromRow === 1 && deltaY === 2 && deltaX === 0 && !game[toRow][toCol] && !game[toRow - 1][toCol]) return true; // Move two squares from start
          }
          return false;
        case 'r': // Rook
          if (deltaX !== 0 && deltaY !== 0) return false; // Must move in straight lines
          return isPathClear(fromRow, fromCol, toRow, toCol, game);
        case 'n': // Knight
          return (Math.abs(deltaX) === 2 && Math.abs(deltaY) === 1) || (Math.abs(deltaX) === 1 && Math.abs(deltaY) === 2);
        case 'b': // Bishop
          if (Math.abs(deltaX) !== Math.abs(deltaY)) return false; // Must move diagonally
          return isPathClear(fromRow, fromCol, toRow, toCol, game);
        case 'q': // Queen
          if (deltaX !== 0 && deltaY !== 0 && Math.abs(deltaX) !== Math.abs(deltaY)) return false; // Must move like rook or bishop
          return isPathClear(fromRow, fromCol, toRow, toCol, game);
        case 'k': // King
          return Math.abs(deltaX) <= 1 && Math.abs(deltaY) <= 1;
        default:
          return false;
      }
    }

    // Check if the path between two squares is clear (for rook, bishop, queen)
    function isPathClear(fromRow, fromCol, toRow, toCol, game) {
      const stepX = Math.sign(toCol - fromCol);
      const stepY = Math.sign(toRow - fromRow);
      let x = fromCol + stepX;
      let y = fromRow + stepY;

      while (x !== toCol || y !== toRow) {
        if (game[y][x]) return false;
        x += stepX;
        y += stepY;
      }
      return true;
    }

    function Game() {
      const [game, setGame] = React.useState(initialGameState);
      const [selectedSquare, setSelectedSquare] = React.useState(null);

      function handleClick(row, col) {
        if (selectedSquare) {
          const [selectedRow, selectedCol] = selectedSquare;
          const piece = game[selectedRow][selectedCol];
          if (isValidMove(piece, selectedRow, selectedCol, row, col, game)) {
            const newGame = game.map(row => row.slice());
            newGame[row][col] = piece;
            newGame[selectedRow][selectedCol] = '';
            setGame(newGame);
          }
          setSelectedSquare(null);
        } else {
          if (game[row][col]) {
            setSelectedSquare([row, col]);
          }
        }
      }

      return (
        <div>
          <Board game={game} onSquareClick={handleClick} selectedSquare={selectedSquare} />
        </div>
      );
    }

    function Board({ game, onSquareClick, selectedSquare }) {
      return (
        <div>
          {game.map((row, rowIndex) => (
            <div key={rowIndex} style={{ display: 'flex' }}>
              {row.map((value, colIndex) => (
                <Square
                  key={colIndex}
                  value={value}
                  onClick={() => onSquareClick(rowIndex, colIndex)}
                  isLight={(rowIndex + colIndex) % 2 === 0}
                  isSelected={selectedSquare && selectedSquare[0] === rowIndex && selectedSquare[1] === colIndex}
                />
              ))}
            </div>
          ))}
        </div>
      );
    }

    function Square({ value, onClick, isLight, isSelected }) {
      const squareStyle = {
        width: '80px',
        height: '80px',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        cursor: 'pointer',
        backgroundColor: isSelected ? '#ffeb3b' : (isLight ? '#f0d9b5' : '#b58863'),
        border: '1px solid #999'
      };

      const pieceDisplay = () => {
        if (value) {
          return <img src={pieceImages[value]} alt={value} style={{ width: '70px', height: '70px' }} />;
        }
        return null;
      };

      return (
        <button style={squareStyle} onClick={onClick}>
          {pieceDisplay()}
        </button>
      );
    }

    const root = ReactDOM.createRoot(document.getElementById("root"));
    root.render(<Game />);
  </script>
</body>
</html>
