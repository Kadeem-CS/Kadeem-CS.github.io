<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fabric.js Chessboard with Legal Moves</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>
    <style>
        canvas {
            border: 1px solid #000;
        }
    </style>
</head>
<body>
    <canvas id="canvas" width="400" height="400"></canvas>
    <script>
        const canvas = new fabric.Canvas('canvas');
        const squareSize = 50;
        let turn = 'white';

        const pieces = {
            'r': 'https://upload.wikimedia.org/wikipedia/commons/f/ff/Chess_rdt45.svg',
            'n': 'https://upload.wikimedia.org/wikipedia/commons/e/ef/Chess_ndt45.svg',
            'b': 'https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg',
            'q': 'https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg',
            'k': 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Chess_kdt45.svg',
            'p': 'https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg',
            'R': 'https://upload.wikimedia.org/wikipedia/commons/7/72/Chess_rlt45.svg',
            'N': 'https://upload.wikimedia.org/wikipedia/commons/7/70/Chess_nlt45.svg',
            'B': 'https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg',
            'Q': 'https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg',
            'K': 'https://upload.wikimedia.org/wikipedia/commons/4/42/Chess_klt45.svg',
            'P': 'https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg'
        };

        const boardState = [
            ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
            ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
            ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
        ];

        function createChessboard() {
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    const isLightSquare = (row + col) % 2 === 0;
                    const square = new fabric.Rect({
                        left: col * squareSize,
                        top: row * squareSize,
                        fill: isLightSquare ? '#eee' : '#8B4513',
                        width: squareSize,
                        height: squareSize,
                        selectable: false
                    });
                    canvas.add(square);
                }
            }
        }

        // Function to check if a move is valid
        function isValidMove(piece, fromRow, fromCol, toRow, toCol) {
            const rowDiff = Math.abs(toRow - fromRow);
            const colDiff = Math.abs(toCol - fromCol);

            // Ensure destination is empty or has a piece of opposite color
            const destinationPiece = boardState[toRow][toCol];
            if (destinationPiece !== '.' && 
                ((turn === 'white' && destinationPiece === destinationPiece.toUpperCase()) || 
                (turn === 'black' && destinationPiece === destinationPiece.toLowerCase()))) {
                return false;
            }

            switch (piece.toLowerCase()) {
                case 'p': // Pawn
                    if (piece === 'P') {
                        // White pawn
                        if (fromRow === 6 && toRow === 4 && fromCol === toCol && boardState[toRow][toCol] === '.') return true; // First move
                        if (toRow === fromRow - 1 && fromCol === toCol && boardState[toRow][toCol] === '.') return true; // Regular move
                        if (toRow === fromRow - 1 && colDiff === 1 && boardState[toRow][toCol] !== '.') return true; // Capture
                    } else if (piece === 'p') {
                        // Black pawn
                        if (fromRow === 1 && toRow === 3 && fromCol === toCol && boardState[toRow][toCol] === '.') return true; // First move
                        if (toRow === fromRow + 1 && fromCol === toCol && boardState[toRow][toCol] === '.') return true; // Regular move
                        if (toRow === fromRow + 1 && colDiff === 1 && boardState[toRow][toCol] !== '.') return true; // Capture
                    }
                    break;
                case 'r': // Rook
                    if (rowDiff === 0 || colDiff === 0) {
                        return isPathClear(fromRow, fromCol, toRow, toCol); // Check if path is clear
                    }
                    break;
                case 'n': // Knight
                    return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2); // "L" shape
                case 'b': // Bishop
                    if (rowDiff === colDiff) {
                        return isPathClear(fromRow, fromCol, toRow, toCol); // Check if path is clear
                    }
                    break;
                case 'q': // Queen
                    if (rowDiff === colDiff || rowDiff === 0 || colDiff === 0) {
                        return isPathClear(fromRow, fromCol, toRow, toCol); // Check if path is clear
                    }
                    break;
                case 'k': // King
                    return rowDiff <= 1 && colDiff <= 1; // One square in any direction
            }

            return false; // Default to invalid move
        }

        function isPathClear(fromRow, fromCol, toRow, toCol) {
            const rowStep = Math.sign(toRow - fromRow);
            const colStep = Math.sign(toCol - fromCol);
            let r = fromRow + rowStep, c = fromCol + colStep;
            while (r !== toRow || c !== toCol) {
                if (boardState[r][c] !== '.') return false;
                r += rowStep;
                c += colStep;
            }
            return true;
        }

        function addPieces() {
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    const piece = boardState[row][col];
                    if (piece !== '.') {
                        fabric.loadSVGFromURL(pieces[piece], ((piece, row, col) => {
                            return function(objects, options) {
                                const svgPiece = fabric.util.groupSVGElements(objects, options);
                                svgPiece.set({
                                    left: col * squareSize + squareSize / 2,
                                    top: row * squareSize + squareSize / 2,
                                    originX: 'center',
                                    originY: 'center',
                                    hasControls: false,
                                    selectable: true,
                                    pieceColor: piece === piece.toUpperCase() ? 'white' : 'black'
                                });

                                let fromRow = row, fromCol = col;

                                svgPiece.on('mousedown', function() {
                                    if ((turn === 'white' && this.pieceColor === 'white') || 
                                        (turn === 'black' && this.pieceColor === 'black')) {
                                        canvas.setActiveObject(this);
                                    }
                                });

                                svgPiece.on('mouseup', function() {
                                    if (canvas.getActiveObject() === this) {
                                        const toRow = Math.round(this.top / squareSize);
                                        const toCol = Math.round(this.left / squareSize);

                                        if (isValidMove(piece, fromRow, fromCol, toRow, toCol)) {
                                            this.set({
                                                left: toCol * squareSize + squareSize / 2,
                                                top: toRow * squareSize + squareSize / 2
                                            });

                                            // Update the board state
                                            boardState[toRow][toCol] = piece;
                                            boardState[fromRow][fromCol] = '.';

                                            canvas.renderAll();
                                            turn = turn === 'white' ? 'black' : 'white'; // Switch turns
                                        } else {
                                            // Invalid move, reset to original position
                                            this.set({
                                                left: fromCol * squareSize + squareSize / 2,
                                                top: fromRow * squareSize + squareSize / 2
                                            });
                                            canvas.renderAll();
                                        }
                                    }
                                });

                                canvas.add(svgPiece);
                            };
                        })(piece, row, col));
                    }
                }
            }
        }

        createChessboard();
        addPieces();

        canvas.on('object:moving', function(e) {
            const obj = e.target;
            obj.set({
                left: Math.round(obj.left / squareSize) * squareSize + squareSize / 2,
                top: Math.round(obj.top / squareSize) * squareSize + squareSize / 2
            });
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fabric.js Chessboard with Legal Moves</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>
    <style>
        canvas {
            border: 1px solid #000;
        }
    </style>
</head>
<body>
    <canvas id="canvas" width="400" height="400"></canvas>
    <script>
        const canvas = new fabric.Canvas('canvas');
        const squareSize = 50;
        let turn = 'white';

        const pieces = {
            'r': 'https://upload.wikimedia.org/wikipedia/commons/f/ff/Chess_rdt45.svg',
            'n': 'https://upload.wikimedia.org/wikipedia/commons/e/ef/Chess_ndt45.svg',
            'b': 'https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg',
            'q': 'https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg',
            'k': 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Chess_kdt45.svg',
            'p': 'https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg',
            'R': 'https://upload.wikimedia.org/wikipedia/commons/7/72/Chess_rlt45.svg',
            'N': 'https://upload.wikimedia.org/wikipedia/commons/7/70/Chess_nlt45.svg',
            'B': 'https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg',
            'Q': 'https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg',
            'K': 'https://upload.wikimedia.org/wikipedia/commons/4/42/Chess_klt45.svg',
            'P': 'https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg'
        };

        const boardState = [
            ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
            ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.'],
            ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
            ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
        ];

        function createChessboard() {
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    const isLightSquare = (row + col) % 2 === 0;
                    const square = new fabric.Rect({
                        left: col * squareSize,
                        top: row * squareSize,
                        fill: isLightSquare ? '#eee' : '#8B4513',
                        width: squareSize,
                        height: squareSize,
                        selectable: false
                    });
                    canvas.add(square);
                }
            }
        }

        // Function to check if a move is valid
        function isValidMove(piece, fromRow, fromCol, toRow, toCol) {
            const rowDiff = Math.abs(toRow - fromRow);
            const colDiff = Math.abs(toCol - fromCol);

            // Ensure destination is empty or has a piece of opposite color
            const destinationPiece = boardState[toRow][toCol];
            if (destinationPiece !== '.' && 
                ((turn === 'white' && destinationPiece === destinationPiece.toUpperCase()) || 
                (turn === 'black' && destinationPiece === destinationPiece.toLowerCase()))) {
                return false;
            }

            switch (piece.toLowerCase()) {
                case 'p': // Pawn
                    if (piece === 'P') {
                        // White pawn
                        if (fromRow === 6 && toRow === 4 && fromCol === toCol && boardState[toRow][toCol] === '.') return true; // First move
                        if (toRow === fromRow - 1 && fromCol === toCol && boardState[toRow][toCol] === '.') return true; // Regular move
                        if (toRow === fromRow - 1 && colDiff === 1 && boardState[toRow][toCol] !== '.') return true; // Capture
                    } else if (piece === 'p') {
                        // Black pawn
                        if (fromRow === 1 && toRow === 3 && fromCol === toCol && boardState[toRow][toCol] === '.') return true; // First move
                        if (toRow === fromRow + 1 && fromCol === toCol && boardState[toRow][toCol] === '.') return true; // Regular move
                        if (toRow === fromRow + 1 && colDiff === 1 && boardState[toRow][toCol] !== '.') return true; // Capture
                    }
                    break;
                case 'r': // Rook
                    if (rowDiff === 0 || colDiff === 0) {
                        return isPathClear(fromRow, fromCol, toRow, toCol); // Check if path is clear
                    }
                    break;
                case 'n': // Knight
                    return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2); // "L" shape
                case 'b': // Bishop
                    if (rowDiff === colDiff) {
                        return isPathClear(fromRow, fromCol, toRow, toCol); // Check if path is clear
                    }
                    break;
                case 'q': // Queen
                    if (rowDiff === colDiff || rowDiff === 0 || colDiff === 0) {
                        return isPathClear(fromRow, fromCol, toRow, toCol); // Check if path is clear
                    }
                    break;
                case 'k': // King
                    return rowDiff <= 1 && colDiff <= 1; // One square in any direction
            }

            return false; // Default to invalid move
        }

        function isPathClear(fromRow, fromCol, toRow, toCol) {
            const rowStep = Math.sign(toRow - fromRow);
            const colStep = Math.sign(toCol - fromCol);
            let r = fromRow + rowStep, c = fromCol + colStep;
            while (r !== toRow || c !== toCol) {
                if (boardState[r][c] !== '.') return false;
                r += rowStep;
                c += colStep;
            }
            return true;
        }

        function addPieces() {
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    const piece = boardState[row][col];
                    if (piece !== '.') {
                        fabric.loadSVGFromURL(pieces[piece], ((piece, row, col) => {
                            return function(objects, options) {
                                const svgPiece = fabric.util.groupSVGElements(objects, options);
                                svgPiece.set({
                                    left: col * squareSize + squareSize / 2,
                                    top: row * squareSize + squareSize / 2,
                                    originX: 'center',
                                    originY: 'center',
                                    hasControls: false,
                                    selectable: true,
                                    pieceColor: piece === piece.toUpperCase() ? 'white' : 'black'
                                });

                                let fromRow = row, fromCol = col;

                                svgPiece.on('mousedown', function() {
                                    if ((turn === 'white' && this.pieceColor === 'white') || 
                                        (turn === 'black' && this.pieceColor === 'black')) {
                                        canvas.setActiveObject(this);
                                    }
                                });

                                svgPiece.on('mouseup', function() {
                                    if (canvas.getActiveObject() === this) {
                                        const toRow = Math.round(this.top / squareSize);
                                        const toCol = Math.round(this.left / squareSize);

                                        if (isValidMove(piece, fromRow, fromCol, toRow, toCol)) {
                                            this.set({
                                                left: toCol * squareSize + squareSize / 2,
                                                top: toRow * squareSize + squareSize / 2
                                            });

                                            // Update the board state
                                            boardState[toRow][toCol] = piece;
                                            boardState[fromRow][fromCol] = '.';

                                            canvas.renderAll();
                                            turn = turn === 'white' ? 'black' : 'white'; // Switch turns
                                        } else {
                                            // Invalid move, reset to original position
                                            this.set({
                                                left: fromCol * squareSize + squareSize / 2,
                                                top: fromRow * squareSize + squareSize / 2
                                            });
                                            canvas.renderAll();
                                        }
                                    }
                                });

                                canvas.add(svgPiece);
                            };
                        })(piece, row, col));
                    }
                }
            }
        }

        createChessboard();
        addPieces();

        canvas.on('object:moving', function(e) {
            const obj = e.target;
            obj.set({
                left: Math.round(obj.left / squareSize) * squareSize + squareSize / 2,
                top: Math.round(obj.top / squareSize) * squareSize + squareSize / 2
            });
        });
    </script>
</body>
</html>
